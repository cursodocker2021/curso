>>>>>>>>>>>>>>>> Exercícios de imagem

Acesse este site para entender mais sobre o Dockerfile:
https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index

Exercício 1:
Crie uma pasta chamada primeirobuild e entre nela
Crie um arquivo chamado Dockerfile e edite o mesmo adicionando o seguinte conteúdo:
FROM nginx:1.13

LABEL maintainer '<SEU NOME>'

RUN echo '<h1>Hello World !</h1>' > /usr/share/nginx/html/index.html
Salve e saia do arquivo
Execute os seguintes comandos na sequência:
docker image build -t meu-primeiro-build .
docker image ls
docker container run -p 80:80 meu-primeiro-build
Entre no navegador com o IP do host ou execute um curl -l http://localhost no Linux
Pare e exclua o container e a imagem

Exercício 2:
Crie uma pasta chamada segundobuild e entre nela
Crie um arquivo chamado Dockerfile e edite o mesmo adicionando o seguinte conteúdo:
FROM nginx:1.13

LABEL maintainer 'Nome <email>'

RUN echo '<h1>Sem conteúdo</h1>' > /usr/share/nginx/html/conteudo.html

COPY *.html /usr/share/nginx/html/
Salve e saia do arquivo
Crie um novo arquivo chamado index.html com este conteúdo:
<a href="conteudo.html">Conteúdo do site</a>
Salve e saia do arquivo
Execute os seguintes comandos na sequência:
docker image build -t build-copia-arquivos .
docker image ls
docker container run -p 80:80 build-copia-arquivos
Entre no navegador com o IP do host ou execute um curl -l http://localhost no Linux
Pare e exclua o container e a imagem

Exercício 3:
Crie uma pasta chamada terceirobuild e entre nela
Crie um arquivo chamado Dockerfile e edite o mesmo adicionando o seguinte conteúdo:
FROM python:3.6

LABEL maintainer 'Nome <email>'

RUN useradd www && \
  mkdir /app && \
  mkdir /log && \
  chown www /log

USER www

VOLUME /log

WORKDIR /app

EXPOSE 8000

ENTRYPOINT ["/usr/local/bin/python"]

CMD ["run.py"]
Salve e saia do arquivo
Crie um arquivo index.html com o conteúdo:
<p>Hello from python</p>
Salve e saia do arquivo
Crie um arquivo chamado run.py com o conteúdo do arquivo: https://github.com/cursodocker2021/curso/blob/main/run.py
Salve e saia do arquivo
Execute os seguintes comandos na sequência:
docker build -t build-dev-python .
docker run -it -v $(pwd):/app -p 80:8000 build-dev-python
Entre no navegador com o IP do host ou execute um curl -l http://localhost no Linux
Pare e exclua o container e a imagem

LEIA e EXECUTE:
Neste exemplo temos um pequeno servidor web atendendo na porta 8000 e
exposta via instrução EXPOSE.

Também temos o uso do ENTRYPOINT e CMD definindo exatamente que processo será
executado ao subir o container, podemos notar que o container consegue
encontrar o run.py, por conta da instrução WORKDIR que define o diretório aonde o
processo principal será executado.

Ao executar o container, uma das informações colocados no log (stdout e arquivo
em disco) é o usuário corrente, e podemos notar que o processo não está rodando
como root e sim www, conforme foi definido pela instrução USER.

Por último temos o comando VOLUME que instrui o docker a expor o diretório /log
como um volume, que pode ser facilmente mapeado por outro container. Podemos
verificar isto seguindo os seguintes passos:
• Construir a imagem e executar o container
• Acessar a URL http://<IP>:8000 via browser
• Verificar o log gerado na saída do container criado
• Criar e rodar um segundo container mapeando os volumes do primeiro e
checar o arquivo de log: docker run -it --volumes-from=<container criado>
debian cat /log/http-server.log
• Importante substituir a referência do volumes_from pelo hash do primeiro
container criado
• O resultado do cat será o mesmo log já gerado pelo primeiro container

Exercício 4:
Instale e configure o GIT no seu servidor:
https://linuxhint.com/install_git_ubuntu_20-24/
Execute o seguinte exercício:
https://github.com/ondrejsika/docker-training#practice

Exercício 5:
https://github.com/docker/labs/blob/master/beginner/chapters/webapps.md#23-create-your-first-image

Exercício 6:
Isntale o NodeJs no seu servidor:
apt update
apt install nodejs
apt install npm
nodejs -v
Execute os passos do laboratório: https://www.digitalocean.com/community/tutorials/como-construir-uma-aplicacao-node-js-com-o-docker-pt

Exercício 7:
Execute a partir do "Second way": https://codefresh.io/docker-tutorial/create-docker-images-for-java/

>>>>>>>>>>>>>>>> Exercício de subida de imagem para o Dockerhub

Exercício 8:
Crie uma pasta chamada "siteapache" e entre nela
Crie uma pasta chamada "site" dentro da "siteapache" e entre nela
Execute o comando Linux "wget http://site1368633667.hospedagemdesites.ws/site1.zip"
Agora execute os seguintes comandos Linux em ordem:
unzip site1.zip
rm -rf site1.zip
tar -czf site.tar ./
cp site.tar ../
cd ../
rm Rf site
Crie um arquivo chamado Dockerfile com o seguinte conteúdo:
FROM debian

RUN apt-get update && apt-get install -y apache2 && apt-get clean

ENV APACHE_LOCK_DIR="var/lock"
ENV APACHE_PID_FILE="var/run/apache2.pid"
ENV APACHE_RUN_USER="www-data"
ENV APACHE_RUN_GROUP="www-data"
ENV APACHE_LOG_DIR="/var/log/apache2"

ADD site.tar /var/www/html

LABEL description="Apache Webserver 1.0"

VOLUME /var/www/html/

EXPOSE 80

ENTRYPOINT ["/usr/sbin/apachectl"]

CMD ["-D", "FOREGROUND"]
Agora efetue o build da imagem com o Dockerfile que você criou atribuindo o nome "siteapache" e a tag "1.0" para a imagem
Liste as imagens Docker
Faça um teste subindo um container em background em modo interativo, mapeando a porta 80 interna e externa com a imagem que você criou
Teste seu site no navegador
Agora pare e exclua o container e a imagem

Agora vamos enviar sua imagem customizada para seu repositório no Dockerhub:
Entre no Dockerhub e crie um repositório público chamado "siteapache"
Volte para o seu servidor e execute:
docker login
docker build . -t nome-de-usuário-dockerhub/siteapache:1.0
docker push nome-de-usuário-dockerhub/siteapache:1.0
Exclua a imagem local
Faça um teste subindo um container em background em modo interativo, mapeando a porta 80 interna e externa com a imagem apontando diretamente para o dockerhub no formato nome-de-usuário-dockerhub/siteapache:1.0

>>>>>>>>>>>>>>>> Exercício criação e uso de registry próprio

Exercício 9:
Entre no docker hub e procure pela imagem do registry, pegue a informação da porta padrão que deverá ser usada
Suba o container do seu registry próprio: docker run -d -p <PORTA>:<PORTA> --restart always --name registry registry:2
Consulte as imagens existentes no seu registry: curl localhost:<PORTA>/v2/_catalog
Deslogue da sua conta do Docker hub: docker logout
Faça um 're-tag' da sua imagem siteapache para poder enviar para o seu registry próprio: docker image tag <ID DA IMAGEM> localhost:<PORTA DO REGISTRY>/siteapache:1.0
Suba sua imagem para o seu regisry próprio: docker push localhost:<PORTA>/siteapache:1.0
Consulte as imagens existentes no seu registry: curl localhost:<PORTA>/v2/_catalog
Teste sua imagem: docker run -d -p 80:80 localhost:<PORTA>/siteapache:1.0

>>>>>>>>>>>>>>>> Exercício para visualização gráfica do Docker

Exercício 10:
Execute o seguinte container e abra no navegador com o IP do servidor e a respectiva porta: docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce
Execute a configuração inicial e explore as os containers, volumes, redes.
Fique a vontade para experimentar, crie containers com a interface usando imagens do dockerhub, insira o seu registry local e crie um container com sua imagem que consta nele e explore o restante do sistema.

>>>>>>>>>>>>>>>> Depois de todo esse trabalho, execute este container, abra no navegador e relaxe um pouco: docker run -d -p 8600:8080 bharathshetty4/supermario

